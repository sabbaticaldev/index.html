diff --git a/server/src/tasks/index.js b/server/src/tasks/index.js
index 1234567..89abcde 100644
--- a/server/src/tasks/index.js
+++ b/server/src/tasks/index.js
@@ -1,3 +1,4 @@
+import { evaluateCondition } from '../utils.js';
 import fs from "fs";
 import path from "path";
 import yargs from "yargs";
@@ -10,6 +11,7 @@ import { createReelRipOff } from "./instagram.js";
 import { createMapVideo, createZoomInVideo } from "./maps.js";
 import { refactorFolder } from "./refactor.js";
 import { CreateVideoFromImage } from "./video.js";
+import { executeTasks } from "../utils.js";
 
 // Helper function to determine if input is a file and read JSON or JS asynchronously
 const readFile = async (filePath) => {
@@ -46,6 +48,18 @@ const parseInput = (input) => {
   }
 };
 
+const executeTasksWithCondition = async ({ tasks, prompt, deps = {} }) => {
+  const filteredTasks = await Promise.all(
+    tasks.map(async (task) => {
+      if (task.condition) {
+        const shouldRun = await evaluateCondition(task.condition, deps);
+        return shouldRun ? task : null;
+      }
+      return task;
+    })
+  );
+  await executeTasks({ tasks: filteredTasks.filter(Boolean), prompt, deps });
+};
 const yarg = yargs(hideBin(process.argv))
   .command(
     "reel <input>",
@@ -57,7 +71,7 @@ const yarg = yargs(hideBin(process.argv))
     },
     async (argv) => {
       const config = await parseInput(argv.input);
-      await createReelRipOff(config);
+      await executeTasksWithCondition(createReelRipOff(config));
     },
   )
   .command(
@@ -70,7 +84,7 @@ const yarg = yargs(hideBin(process.argv))
     },
     async (argv) => {
       const config = await parseInput(argv.input);
-      await CreateVideoFromImage(config);
+      await executeTasksWithCondition(CreateVideoFromImage(config));
     },
   )
   .command(
@@ -84,7 +98,7 @@ const yarg = yargs(hideBin(process.argv))
     },
     async (argv) => {
       const config = await parseInput(argv.input);
-      await createMapVideo(config);
+      await executeTasksWithCondition(createMapVideo(config));
     },
   )
   .command(
@@ -98,7 +112,7 @@ const yarg = yargs(hideBin(process.argv))
     },
     async (argv) => {
       const config = await parseInput(argv.input);
-      await createZoomInVideo(config);
+      await executeTasksWithCondition(createZoomInVideo(config));
     },
   )
   .command(
@@ -112,7 +126,7 @@ const yarg = yargs(hideBin(process.argv))
     },
     async (argv) => {
       const config = await parseInput(argv.input);
-      await refactorFolder(config);
+      await executeTasksWithCondition(refactorFolder(config));
     },
   )
   .command(
diff --git a/server/src/utils.js b/server/src/utils.js
index 1234567..89abcde 100644
--- a/server/src/utils.js
+++ b/server/src/utils.js
@@ -4,6 +4,7 @@ import { applyPatch } from "./utils/patch.js";
 import { sleep } from "./utils/sleep.js";
 import { checkAndExecute, executeTasks } from "./utils/tasks.js";
 import { generateXMLFormat, parseXML } from "./utils/xml.js";
+import { evaluateCondition } from "./utils/condition.js";
 
 export {
   applyPatch,
@@ -13,5 +14,6 @@ export {
   generateXMLFormat,
   parseXML,
   readDirectory,
-  sleep,
+  sleep, 
+  evaluateCondition
 };
diff --git a/server/src/utils/condition.js b/server/src/utils/condition.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/server/src/utils/condition.js
@@ -0,0 +1,11 @@
+export const evaluateCondition = async (condition, deps) => {
+  if (typeof condition === 'boolean') {
+    return condition;
+  } else if (typeof condition === 'function') {
+    return await condition(deps);
+  } else {
+    throw new Error('Invalid condition type. Expected boolean or function.');
+  }
+};
+